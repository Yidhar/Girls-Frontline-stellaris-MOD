namespace = sfdoll_planet_killer_event
#id标准写法为namespace的值加上编号
#对恒星炮
planet_event = {
	id = sfdoll_planet_killer_event.1
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		#威慑值和得分
		add_threat = { who = from.owner amount = 10 }
		from = {
			save_event_target_as = sfdoll_planet_killer_fleet
			owner = {
				save_event_target_as = crisis_country
				add_victory_score = {
					source = destroyed_stars_score
					score = 10
				}
			}
		}
		#处理殖民地
		if = {
			limit = { is_colony = yes }
			every_owned_pop = {
				kill_pop = yes
			}
			destroy_colony = yes
		}

		#炸的是恒星
		if = {
			limit =  { is_star = yes }
			from = {
				owner = {
					#初次炸恒星
					if = {
						limit = {
							NOT = { has_country_flag = cracked_first_star }
						}
						set_country_flag = cracked_first_star
					}
				}
			}
			#变成黑洞
			# change_pc = pc_black_hole
			# clear_deposits = yes
			# reset_planet = yes
			solar_system = { save_event_target_as = destroyed_system }
			solar_system = {
				destroy_star_system = yes
			}
		}
		else_if = {
			#环世界
			limit  = {
				is_ringworld = yes
			}
			change_pc = pc_shattered_ring_habitable
			clear_deposits = yes
			
		}
		else = {
			change_pc = pc_shattered
			clear_deposits = yes
		}
	}
}

#跨星系攻击触发，改为诺耶露专用,scope = 诺耶露舰船
fleet_event = {
	id = sfdoll_planet_killer_event.2
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		solar_system = {
			save_event_target_as = system_source_of_planet_killer
		}
		save_event_target_as = fleet_source_of_planet_killer
		from = {
			owner = {
				country_event = {
					id = sfdoll_planet_killer_event.3
				}
			}
		}
	}
}

#选择攻击目标
country_event = {
	id = sfdoll_planet_killer_event.3
	title = "sfdoll_planet_killer_event.3"
	desc = "sfdoll_planet_killer_event_3_desc"
	is_triggered_only = yes
	picture = GFX_evp_sfdoll_ship_in_orbit
	location = event_target:ship_sfdoll_noel
	immediate = {
		#清除之前留下的event target
		clear_target_of_pk_sfdoll_effect = yes

		#遍历符合条件的星系
		while = {
			count = 6
			random_system = {
				limit = {
					OR = {
						distance = {
							source = event_target:system_source_of_planet_killer
							max_jumps = 1
						}
						distance = {
							source = event_target:system_source_of_planet_killer
							max_distance = 1
						}

					}
					NOT = {
						has_star_flag = flag_sfdoll_planet_killer_target
					}
				}

				#统计变量，每次遍历+1,表示对应第几个选项，遍历完清除
				root = {
					change_variable = {
						which = count_sfdoll_planet_killer_target
						value = 1
					}
				}
	
				star = {
					#为不同选项添加不同的target
					if = {
						limit = { 
							root = {
								check_variable = {
									which = count_sfdoll_planet_killer_target
									value = 1
								}
							}
						}
						save_global_event_target_as = target_1_of_pk_sfdoll
					}
					if = {
						limit = { 
							root = {
								check_variable = {
									which = count_sfdoll_planet_killer_target
									value = 2
								}
							}
						}
						save_global_event_target_as = target_2_of_pk_sfdoll
					}
					if = {
						limit = { 
							root = {
								check_variable = {
									which = count_sfdoll_planet_killer_target
									value = 3
								}
							}
						}
						save_global_event_target_as = target_3_of_pk_sfdoll
					}
					if = {
						limit = { 
							root = {
								check_variable = {
									which = count_sfdoll_planet_killer_target
									value = 4
								}
							}
						}
						save_global_event_target_as = target_4_of_pk_sfdoll
					}
					if = {
						limit = { 
							root = {
								check_variable = {
									which = count_sfdoll_planet_killer_target
									value = 5
								}
							}
						}
						save_global_event_target_as = target_5_of_pk_sfdoll
					}
					if = {
						limit = { 
							root = {
								check_variable = {
									which = count_sfdoll_planet_killer_target
									value = 6
								}
							}
						}
						save_global_event_target_as = target_6_of_pk_sfdoll
					}
				}
				set_star_flag = flag_sfdoll_planet_killer_target
			}

		}
		#清除计算target数的变量
		clear_variable = count_sfdoll_planet_killer_target
	}

	#摧毁诺耶露所在的星系
	option = {
		name = sfdoll_planet_killer_event_3_attack_here
		event_target:system_source_of_planet_killer = {
			star = {
				save_event_target_as = attacked_by_planet_killer
			}
		}
		event_target:fleet_source_of_planet_killer = {
			fleet_event = {
				id = sfdoll_planet_killer_event.4
			}
		}
		remove_flag_sfdoll_planet_killer_target_effect = yes
		clear_target_of_pk_sfdoll_effect = yes
	}

	option = {
		name = sfdoll_planet_killer_event_3_option_1
		trigger = {
			exists = event_target:target_1_of_pk_sfdoll
		}

		event_target:target_1_of_pk_sfdoll = {
			save_event_target_as = attacked_by_planet_killer
		}
		#跳转到发射武器的舰队，用于保证触发后续事件的from和原版w槽触发器一致
		event_target:fleet_source_of_planet_killer = {
			fleet_event = {
				id = sfdoll_planet_killer_event.4
			}
		}
		remove_flag_sfdoll_planet_killer_target_effect = yes
		clear_target_of_pk_sfdoll_effect = yes
	}

	option = {
		name = sfdoll_planet_killer_event_3_option_2
		trigger = {
			exists = event_target:target_2_of_pk_sfdoll
		}
		event_target:target_2_of_pk_sfdoll = {
			save_event_target_as = attacked_by_planet_killer
		}
		#跳转到发射武器的舰队，用于保证触发后续事件的from和原版w槽触发器一致
		event_target:fleet_source_of_planet_killer = {
			fleet_event = {
				id = sfdoll_planet_killer_event.4
			}
		}
		remove_flag_sfdoll_planet_killer_target_effect = yes
		clear_target_of_pk_sfdoll_effect = yes
	}

	option = {
		name = sfdoll_planet_killer_event_3_option_3
		trigger = {
			exists = event_target:target_3_of_pk_sfdoll
		}
		event_target:target_3_of_pk_sfdoll = {
			save_event_target_as = attacked_by_planet_killer
		}
		#跳转到发射武器的舰队，用于保证触发后续事件的from和原版w槽触发器一致
		event_target:fleet_source_of_planet_killer = {
			fleet_event = {
				id = sfdoll_planet_killer_event.4
			}
		}
		remove_flag_sfdoll_planet_killer_target_effect = yes
		clear_target_of_pk_sfdoll_effect = yes
	}
	option = {
		name = sfdoll_planet_killer_event_3_option_4
		trigger = {
			exists = event_target:target_4_of_pk_sfdoll
		}
		event_target:target_4_of_pk_sfdoll = {
			save_event_target_as = attacked_by_planet_killer
		}
		#跳转到发射武器的舰队，用于保证触发后续事件的from和原版w槽触发器一致
		event_target:fleet_source_of_planet_killer = {
			fleet_event = {
				id = sfdoll_planet_killer_event.4
			}
		}
		remove_flag_sfdoll_planet_killer_target_effect = yes
		clear_target_of_pk_sfdoll_effect = yes
	}

	#目标5
	option = {
		name = sfdoll_planet_killer_event_3_option_5
		trigger = {
			exists = event_target:target_5_of_pk_sfdoll
		}
		event_target:target_5_of_pk_sfdoll = {
			save_event_target_as = attacked_by_planet_killer
		}
		#跳转到发射武器的舰队，用于保证触发后续事件的from和原版w槽触发器一致
		event_target:fleet_source_of_planet_killer = {
			fleet_event = {
				id = sfdoll_planet_killer_event.4
			}
		}
		remove_flag_sfdoll_planet_killer_target_effect = yes
		clear_target_of_pk_sfdoll_effect = yes
	}

	#目标6
	option = {
		name = sfdoll_planet_killer_event_3_option_6
		trigger = {
			exists = event_target:target_6_of_pk_sfdoll
		}
		event_target:target_6_of_pk_sfdoll = {
			save_event_target_as = attacked_by_planet_killer
		}
		#跳转到发射武器的舰队，用于保证触发后续事件的from和原版w槽触发器一致
		event_target:fleet_source_of_planet_killer = {
			fleet_event = {
				id = sfdoll_planet_killer_event.4
			}
		}
		remove_flag_sfdoll_planet_killer_target_effect = yes
		clear_target_of_pk_sfdoll_effect = yes
	}

	option = {
		#下一页
		name = sfdoll_planet_killer_event_3_option_11
		trigger = {
			exists = event_target:target_1_of_pk_sfdoll
			exists = event_target:target_2_of_pk_sfdoll
			exists = event_target:target_3_of_pk_sfdoll
			exists = event_target:target_4_of_pk_sfdoll
			exists = event_target:target_5_of_pk_sfdoll
			exists = event_target:target_6_of_pk_sfdoll
		}
		hidden_effect = {
			country_event = {
				id = sfdoll_planet_killer_event.3
			}
		}
	}

	option = {
		#清除星系被选择过的flag，重新选择
		name = sfdoll_planet_killer_event_3_option_12
		remove_flag_sfdoll_planet_killer_target_effect = yes
		clear_target_of_pk_sfdoll_effect = yes
		country_event = { id = sfdoll_planet_killer_event.3	}
	}
	option = {
		#取消本次攻击
		name = QUIT
		remove_flag_sfdoll_planet_killer_target_effect = yes
		clear_target_of_pk_sfdoll_effect = yes
		break = yes
	}
}

#中间事件，从舰队转到被摧毁的恒星，从而让效果的作用域与w槽触发器提供的作用域一致
fleet_event = {
	id = sfdoll_planet_killer_event.4
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		event_target:attacked_by_planet_killer = {
			planet_event = {
				id = sfdoll_planet_killer_event.5
			}
		}
	}
}

#摧毁恒星系，this为目标恒星，from为发射武器的舰队
planet_event = {
	id = sfdoll_planet_killer_event.5
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		remove_flag_sfdoll_planet_killer_target_effect = yes
		#威慑值和得分
		add_threat = { who = from.owner amount = 10 }
		from = {
			owner = {
				set_timed_country_flag = {
					flag = sfdoll_noel_system_attack_cool_down
					days = 30
				}

				#save_event_target_as = crisis_country
				add_victory_score = {
					source = destroyed_stars_score
					score = 10
				}
				#初次炸恒星
				if = {
					limit = {
						NOT = { has_country_flag = cracked_first_star }
					}
					set_country_flag = cracked_first_star
				}
			}
		}
		solar_system = { save_event_target_as = destroyed_system }
		solar_system = {
			destroy_star_system = yes
		}
		from = {
			create_message = {
				type = PLANET_DESTROYED
				localization = message_system_destroyed_sfdoll
				days = 30
				target = prev
			}
		}
	}
}


#航道修改，控制界面
country_event = {
	id = sfdoll_planet_killer_event.6
	title = sfdoll_planet_killer_event.6
	desc = sfdoll_planet_killer_event.6_desc
	is_triggered_only = yes
	picture = GFX_evp_sfdoll_ship_in_orbit
	#刷新信标船
	option = {
		name = sfdoll_planet_killer_event.6_option_a
		allow = {
			#刷新有60天CD
			custom_tooltip = {
				fail_text = create_sfdoll_change_hyperlane_ship_wait
				NOT = {		has_country_flag = flag_create_sfdoll_change_hyperlane_ship	}
			}
		}
		hidden_effect = {
			set_timed_country_flag = {
				flag = flag_create_sfdoll_change_hyperlane_ship
				days = 60
			}
			effect_create_sfdoll_change_hyperlane_ship = yes
			country_event = {
				id = sfdoll_planet_killer_event.6
			}
		}
	}
	#修改航道
	option = {
		name = sfdoll_planet_killer_event.6_option_b
		hidden_effect = {
			effect_change_hyperlane_sfdoll = yes
			country_event = {
				id = sfdoll_planet_killer_event.6
			}
		}
	}
	#摧毁星系，删除信标
	# option = {
	# 	name = sfdoll_planet_killer_event.6_option_c
	# 	allow = {
	# 		always = no
	# 	}
	# 	custom_tooltip = "text_sfdoll_planet_killer_event.6_option_c"
	# 	hidden_effect = {
	# 		event_target:fleet_beacon_sfdoll_1={
	# 			fleet_event = {
	# 				id = sfdoll_planet_killer_event.7
	# 			}
	# 		}
	# 		event_target:fleet_beacon_sfdoll_2 ={
	# 			fleet_event = {
	# 				id = sfdoll_planet_killer_event.7
	# 			}
	# 		}
	# 		delete_fleet = event_target:fleet_beacon_sfdoll_1
	# 		clear_global_event_target = fleet_beacon_sfdoll_1
	# 		delete_fleet = event_target:fleet_beacon_sfdoll_2
	# 		clear_global_event_target = fleet_beacon_sfdoll_2
	# 	}
	# }
	#退出
	option = {
		name = "QUIT"
		hidden_effect = {
			break = yes
		}
	}
}
#从舰队作用域转到被毁的目标恒星
fleet_event = {
	id= sfdoll_planet_killer_event.7
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		solar_system = {
			star = {
				planet_event = {
					id = sfdoll_planet_killer_event.8
				}
			}
		}
	}
}
#铁血之矛，摧毁所在星系，from为发射的舰队
planet_event = {
	id = sfdoll_planet_killer_event.8
	title = sfdoll_planet_killer_event.8
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		#威慑值和得分
		add_threat = { who = from.owner amount = 10 }
		from = {
			owner = {
				add_victory_score = {
					source = destroyed_stars_score
					score = 10
				}
				#初次炸恒星
				if = {
					limit = {
						NOT = { has_country_flag = cracked_first_star }
					}
					set_country_flag = cracked_first_star
				}
			}
		}
		solar_system = { save_event_target_as = destroyed_system }
		solar_system = {
			destroy_star_system = yes
		}
		from = {
			create_message = {
				type = PLANET_DESTROYED
				localization = message_system_destroyed_sfdoll
				days = 30
				target = prev
			}
		}
	}
}


#已停用，入轨检测，判断是否可以触发,from is planet
fleet_event = {
	id = sfdoll_planet_killer_event.9
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		owner = {
			is_ai = no
			has_authority = auth_gf_sfdoll
		}
	}
	immediate = {
		# fleet_event = {
		# 	id = sfdoll_planet_killer_event.10
		# }
	}
}
#fromfrom is planet
# fleet_event = {
# 	id = sfdoll_planet_killer_event.10
# 	title = sfdoll_planet_killer_event.10
# 	desc = sfdoll_planet_killer_event.10.desc
# 	picture = GFX_evp_sfdoll_planet_beam
# 	location = this
# 	hide_window = no
# 	is_triggered_only = yes
# 	trigger = {
# 		owner = {	has_edict = sfdoll_weapon_T_PK_control	}
# 		any_owned_ship = {	has_component = sfdoll_weapon_T_PK	}
# 		fromfrom = {
# 			NOT = {
# 				OR = {
# 					is_star = yes
# 					is_planet_class = pc_shattered
# 					is_planet_class = pc_shattered_2
# 					is_planet_class = pc_shattered_ring_habitable
# 				}
# 			}
# 		}
# 	}
# 	#摧毁星球
# 	option = {
# 		name = sfdoll_planet_killer_event.10_a
# 		hidden_effect = {
# 			fromfrom = {
# 				planet_event = {
# 					id = sfdoll_planet_killer_event.11
# 				}
# 			}
# 		# 	#威慑值和得分
# 		# 	owner = {
# 		# 		add_threat = { who = from.owner amount = 3 }
# 		# 		#save_event_target_as = crisis_country
# 		# 		add_victory_score = {
# 		# 			source = destroyed_stars_score
# 		# 			score = 5
# 		# 		}
# 		# 	}
			
# 		# 	#planet
# 		# 	fromfrom = {
# 		# 		#处理殖民地
# 		# 		if = {
# 		# 			limit = { is_colony = yes }
# 		# 			every_owned_pop = {
# 		# 				kill_pop = yes
# 		# 			}
# 		# 			destroy_colony = yes
# 		# 		}
# 		# 		#炸的是恒星
# 		# 		# if = {
# 		# 		# 	limit =  { is_star = yes }
# 		# 		# 	root = {
# 		# 		# 		owner = {
# 		# 		# 			#初次炸恒星
# 		# 		# 			if = {
# 		# 		# 				limit = {
# 		# 		# 					NOT = { has_country_flag = cracked_first_star }
# 		# 		# 				}
# 		# 		# 				set_country_flag = cracked_first_star
# 		# 		# 			}
# 		# 		# 		}
# 		# 		# 	}
# 		# 		# 	#变成黑洞
# 		# 		# 	change_pc = pc_black_hole
# 		# 		# 	clear_deposits = yes
# 		# 		# 	reset_planet = yes
# 		# 		# }
# 		# 		if = {
# 		# 			#环世界
# 		# 			limit  = {
# 		# 				is_ringworld = yes
# 		# 			}
# 		# 			change_pc = pc_shattered_ring_habitable
# 		# 			clear_deposits = yes
# 		# 		}
# 		# 		else = {
# 		# 			change_pc = pc_shattered
# 		# 			clear_deposits = yes
# 		# 		}
# 		# 	}
# 		# 	create_message = {
# 		# 		type = PLANET_DESTROYED
# 		# 		localization = message_planet_destroyed_sfdoll
# 		# 		days = 30
# 		# 		target = fromfrom
# 		# 	}
# 		}
# 	}
# 	option = {
# 		name = QUIT
# 	}
# }

#T槽对星武器,from = fleet，和W槽触发时的作用域保持一致
planet_event = {
	id = sfdoll_planet_killer_event.11
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		#威慑值和得分
		add_threat = { who = from.owner amount = 10 }
		from = {
			owner = {
				save_event_target_as = crisis_country
				add_victory_score = {
					source = destroyed_stars_score
					score = 10
				}
			}
		}
		#处理殖民地
		if = {
			limit = { is_colony = yes }
			every_owned_pop = {
				kill_pop = yes
			}
			destroy_colony = yes
		}

		#炸的是恒星
		# if = {
		# 	limit =  { is_star = yes }
		# 	from = {
		# 		owner = {
		# 			#初次炸恒星
		# 			if = {
		# 				limit = {
		# 					NOT = { has_country_flag = cracked_first_star }
		# 				}
		# 				set_country_flag = cracked_first_star
		# 			}
		# 		}
		# 	}
		# 	solar_system = { save_event_target_as = destroyed_system }
		# 	solar_system = {
		# 		destroy_star_system = yes
		# 	}
		# }
		# else= {
		# 	#变成黑洞
		# 	change_pc = pc_black_hole
		# 	clear_deposits = yes
		# 	reset_planet = yes
		# 	set_planet_entity = {
		# 		entity = sfdoll_black_hole_entity
		# 	}
		# }
		#用T槽碎行星
		if = {
			#环世界
			limit  = {
				is_ringworld = yes
			}
			change_pc = pc_shattered_ring_habitable
			clear_deposits = yes
			
		}
		else = {
			change_pc = pc_shattered
			clear_deposits = yes
		}
	}
}

#清空星系
planet_event = {
	id = sfdoll_planet_killer_event.12
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		#威慑值和得分
		add_threat = { who = from.owner amount = 10 }
		from = {
			save_event_target_as = sfdoll_planet_killer_fleet
			owner = {
				save_event_target_as = crisis_country
				add_victory_score = {
					source = destroyed_stars_score
					score = 10
				}
			}
		}
		from = {
			owner = {
				#初次炸恒星
				if = {
					limit = {
						NOT = { has_country_flag = cracked_first_star }
					}
					set_country_flag = cracked_first_star
				}
				# create_message = {
				# 	type = STAR_DESTROYED
				# 	localization = message_system_destroyed_sfdoll
				# 	target = root
				# 	days = 30
				# }
			}
		}

		solar_system = { save_event_target_as = destroyed_system }
		solar_system = { effect_sfdoll_empty_system = yes	}
		# else = {
		# 	if = {
		# 		limit = { is_colony = yes }
		# 		every_owned_pop = {
		# 			kill_pop = yes
		# 		}
		# 		destroy_colony = yes
		# 	}
		# 	remove_planet = yes
		# }

	}
}


#殖民W槽
planet_event = {
	id = sfdoll_planet_killer_event.13
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_anomaly = no
		can_colonize = {
			who = root.from.owner
			status = yes
		}
	}
	immediate = {
		start_colony = {
			owner = from.owner
		}
	}
}

#W槽将星球转化为黑洞
planet_event = {
	id = sfdoll_planet_killer_event.14
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		#威慑值和得分
		add_threat = { who = from.owner amount = 10 }
		from = {
			save_event_target_as = sfdoll_planet_killer_fleet
			owner = {
				# 参考星爆器
				save_event_target_as = crisis_country
				add_victory_score = {
					source = destroyed_stars_score
					score = 10
				}
				add_resource = { sr_dark_matter = 3000 }
			}
		}
		# 炸球提示不需要

		# 土著
		#Dismantle observation post
		if = {
			limit = {
				has_observation_outpost = yes
			}
			observation_outpost_owner = {
				country_event = { id = planet_destruction.1000 days = 1 }
			}
		}
		#肃正协议球 Contingency Machine World
		if = {
			limit = {
				is_planet_class = pc_ai
				NOT = { has_planet_flag = machine_lair }
			}
			set_planet_flag = destroyed_by_colossus
			set_planet_flag = planet_cracked
			planet_event = { id = crisis.2040 }
		}
		# Contingency Final Machine World
		if = {
			limit = {
				is_planet_class = pc_ai
				has_planet_flag = machine_lair
			}
			set_planet_flag = destroyed_by_colossus
			set_planet_flag = planet_cracked
			from.owner = { save_event_target_as = final_machine_world_destroyer }
			stop_crisis_sound = yes
			planet_event = { id = crisis.2046 }
		}
		# 虫群 Swarm Situation Log counter
		if = {
			limit = {
				exists = owner
				owner = { is_country_type = swarm }
			}
			every_country = {
				limit = { has_event_chain = "prethoryn_scourge_chain" }
				add_event_chain_counter = {
					event_chain = "prethoryn_scourge_chain"
					counter = "infested_worlds"
					amount = -1
				}
				add_event_chain_counter = {
					event_chain = "prethoryn_scourge_chain"
					counter = "infested_worlds_cleansed"
					amount = 1
				}
			}
		}
		# 星际法
		if = {
			limit = {
				OR = {
					is_active_resolution = "resolution_rulesofwar_reverence_for_life"
					is_active_resolution = "resolution_rulesofwar_independent_tribunals"
					is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
					is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
				}
			}
			from.owner = {
				set_timed_country_flag = { flag = resolution_breached_fired_cracker days = 3600 }
			}
		}
		# Exterminatus Achievement
		if = {
			limit = { is_capital = yes }
			from.owner = { set_country_flag = exterminatus }
		}
		if = {
			limit = {
				exists = owner
				owner = {
					NOT = { is_same_value = from.owner }
					OR = {
						is_country_type = default
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
				}
			}
			# 态度
			if = {
				limit = {
					is_colony = yes
				}
				# modifier for allies + those upset by genocide
				every_country = {
					limit = {
						NOR = {
							is_same_value = from.owner
							is_same_value = root.owner
							AND = {
								has_federation = yes
								is_in_federation_with = from.owner
							}
						}
						OR = {
							has_communications = from.owner
							has_communications = root.owner
						}
						OR = {
							AND = {
								has_federation = yes
								is_in_federation_with = root.owner
							}
							has_ai_personality = awakened_fallen_empire_xenophile
							AND = {
								is_country_type = default
								OR = {
									is_egalitarian = yes
									is_xenophile = yes
								}
							}
						}
					}
					if = {
						limit = { root = { is_colony = no } }
						add_opinion_modifier = {
							modifier = opinion_cracked_an_uninhabited_world
							who = from.owner
						}
					}
					else = {
						add_opinion_modifier = {
							modifier = opinion_cracked_a_world
							who = from.owner
						}
					}
				}
			}
			# modifiers for victim
			owner = {
				if = {
					limit = { root = { is_colony = no } }
					add_opinion_modifier = {
						modifier = opinion_cracked_my_uninhabited_world
						who = from.owner
					}
				}
				else = {
					add_opinion_modifier = {
						modifier = opinion_cracked_my_world
						who = from.owner
					}
				}
				if = {
					limit = { NOT = { has_ethic = ethic_gestalt_consciousness } }
					add_modifier = {
						modifier = colossus_victim
						days = 10800 # 30 years
					}
				}
			}
			if = {
				limit = {
					exists = owner
					owner = { is_country_type = primitive }
				}
				# modifier for allies + those upset by genocide
				every_country = {
					limit = {
						NOT = { is_same_value = from.owner }
						OR = {
							has_communications = from.owner
							has_communications = root.owner
						}
						OR = {
							has_ai_personality = awakened_fallen_empire_xenophile
							AND = {
								is_country_type = default
								NOR = {
									is_xenophobe = yes
									is_homicidal = yes
									is_xenophile = yes
								}
							}
						}
					}
					add_opinion_modifier = {
						modifier = opinion_cracked_a_primitive_world
						who = from.owner
					}
				}
				every_country = {
					limit = {
						NOT = { is_same_value = from.owner }
						OR = {
							has_communications = from.owner
							has_communications = root.owner
						}
						OR = {
							has_ai_personality = awakened_fallen_empire_xenophile
							AND = {
								is_country_type = default
								is_xenophile = yes
							}
						}
					}
					add_opinion_modifier = {
						modifier = opinion_cracked_a_primitive_world_phile
						who = from.owner
					}
				}
			}
		}
		#厌战度 Add war exhaustion to planet owner
		if = {
			limit = {
				exists = owner
			}
			owner = {
				if = {
					limit = { #isn't the case when the crisis bombards planets, for instance
						is_at_war_with = from.fleet.owner
					}
					add_static_war_exhaustion = {
						attacker = from.fleet.owner
						location = root
						value_for_planet_destruction = 1
					}
				}
			}
		}
		#处理殖民地
		if = {
			limit = { is_colony = yes }
			every_owned_pop = {	kill_pop = yes	}
			destroy_colony = yes
		}
		if = {
			limit = { exists = orbital_defence }
			destroy_fleet = orbital_defence
		}
		remove_all_buildings = yes
		#炸的是恒星
		if = {
			limit =  { is_star = yes }
			from = {
				owner = {
					#初次炸恒星
					if = {
						limit = { NOT = { has_country_flag = cracked_first_star } }
						set_country_flag = cracked_first_star
					}
				}
			}
			#变成黑洞
			change_pc = pc_black_hole
			clear_deposits = yes
			reset_planet = yes
			solar_system = {
				set_star_flag = star_cracked
				set_star_class = sc_black_hole
			}
		}
		else_if = {
			#环世界
			limit  = { is_ringworld = yes }
			change_pc = pc_shattered_ring_habitable
			clear_deposits = yes
		}
		else_if = {
			#消灭居住站
			limit = { is_planet_class = pc_habitat }
			remove_planet = yes
		}
		else = {
			change_pc = pc_shattered
			clear_deposits = yes
		}

		# else = {
		# 	change_pc = pc_black_hole
		# 	set_planet_size = 
		# 	clear_deposits = yes
		# }
	}
}

planet_event = {
	id = sfdoll_planet_killer_event.15
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		# 不是恒星，触发原版的爆星事件
		if = {
			limit = { is_star = no }
			fire_on_action = {
				on_action = on_destroy_planet_with_PLANET_KILLER_CRACKER
				scopes = { from = root.from }
			}
		}
		# else = {
		# 	fire_on_action = {
		# 		on_action = on_destroy_planet_with_PLANET_KILLER_STAR_CRACKER
		# 		scopes = { from = root.from }
		# 	}
		# }
		#是恒星
		else = {
			# 威胁度 target 分数 暗物质
			add_threat = { who = from.owner amount = 10 }
			from = {
				owner = {
					save_event_target_as = crisis_country
					add_victory_score = {
						source = destroyed_stars_score
						score = 10
					}
					switch = {
						trigger = galaxy_size
						huge = { add_resource = { sr_dark_matter = 1000 } }
						large = { add_resource = { sr_dark_matter = 1500 } }
						medium = { add_resource = { sr_dark_matter = 2000 } }
						small = { add_resource = { sr_dark_matter = 2500 } }
						tiny = { add_resource = { sr_dark_matter = 3000 } }
					}
					if = {
						limit = { NOT = { has_country_flag = cracked_first_star } }
						set_country_flag = cracked_first_star
					}
				}
			}
			solar_system = { save_event_target_as = destroyed_system }
			every_playable_country = {
				limit = {
					is_ai = no
					has_communications = event_target:crisis_country
					NOR = {
						is_same_value = event_target:crisis_country
						has_country_flag = can_build_star_eaters
						has_country_flag = star_eater_alert@event_target:crisis_country
					}
					intel_level = {
						system = event_target:destroyed_system
						level = none
					}
				}
				country_event = { id = crisis.6180 }
			}
			every_playable_country = {
				limit = {
					is_ai = no
					has_communications = event_target:crisis_country
					NOR = {
						is_same_value = event_target:crisis_country
						has_country_flag = can_build_star_eaters
						has_country_flag = star_eater_alert@event_target:crisis_country
					}
					intel_level = {
						system = event_target:destroyed_system
						level > none
					}
				}
				country_event = { id = crisis.6181 }
			}
			every_playable_country = {
				limit = {
					is_ai = no
					has_communications = event_target:crisis_country
					NOR = {
						is_same_value = event_target:crisis_country
						has_country_flag = star_eater_alert@event_target:crisis_country
					}
					has_country_flag = can_build_star_eaters
				}
				country_event = { id = crisis.6182 }
			}
			every_playable_country = {
				limit = {
					has_communications = event_target:crisis_country
					NOT = {
						has_opinion_modifier = {
							who = event_target:crisis_country
							modifier = opinion_destroying_systems
						}
					}
				}
				add_opinion_modifier = {
					who = event_target:crisis_country
					modifier = opinion_destroying_systems
				}
			}
			solar_system = {
				random_system_planet = {
					limit = { has_modifier = holy_planet }
					planet_event = { id = planet_destruction.605 }
				}
				# 铁血炸星effect
				effect_sfdoll_destroy_star_system = yes
			}
		}
	}
}

#原初之星
planet_event = {
	id = sfdoll_planet_killer_event.16
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		solar_system = {
			every_system_planet = {
				if = {
					limit = { is_planet_class = pc_black_hole }
					change_pc = pc_g_star
				}
			}
			set_star_class = sc_g
		}
		from = { owner = { country_event = { id = sfdoll_planet_killer_event.17 } } }
	}
}
#黑洞转恒星提示
country_event = {
	id = sfdoll_planet_killer_event.17
	title = "sfdoll_planet_killer_event.17"
	desc = "sfdoll_planet_killer_event.17_desc"
	picture = GFX_evt_star_pulsar
	location = from
	is_triggered_only = yes
	fire_only_once = yes
	option = { name = "FASCINATING" }
}
