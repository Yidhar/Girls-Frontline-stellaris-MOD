# Allows you to create your own dynamic keys to be called in localization.

# defined_text = {
# 	name = GetExampleText 					#The key to refer to in locs, e.g. [Root.GetExampleText]
# 	random = no								#If "random = no" is specified (default is "yes"), it will pick the entry with the highest weight (rather than weighted
# 											#random among valid entries). If several entries have the same weight (or none is specified), the first will be picked.
# 	text = {
# 		localization_key = text_something	#The loc key used if this text entry is picked.
# 		trigger = {							#Triggers that determine if this text entry can be picked.
# 		}
# 		weight = {							#Weight field to determine how likely this one is to be picked if multiple are possible.
# 			weight = 1 						#Works like weight fields everywhere, with modifiers etc. Weight is 1 if not specified.
# 			modifier = {
# 				factor = 2
# 			}
# 		}
# 	}
# 	text = { 								#You can specify as many text entries as you want
# 		localization_key = text_something_else
# 		trigger = {
# 		}
# 	}
# 	default = default_text 					#You can specify a default text, which is used in case the triggers of all entries fail.
# }


# You can also do this to use script values in loc:
# defined_text = {
# 	name = scripted_value_test
# 	value = value:desired_science_ships_system_mult
# }


defined_text = {
	name = GF_Get_OGAS_Connection_Title

	text = {
		localization_key = GF_text_OGAS_connection_title_owner
		trigger = {
			has_authority = GF_auth_commonwealth
		}
	}
	default = GF_text_OGAS_connection_title_subnet
	
}


defined_text = {
	name = GF_Get_Archive_Title

	text = {
		localization_key = GF_ogas.12200.a
		trigger = { has_country_flag = GF_history_archive_flag_a }
	}
	text = {
		localization_key = GF_ogas.12200.b
		trigger = { has_country_flag = GF_history_archive_flag_b }
	}
	text = {
		localization_key = GF_ogas.12200.c
		trigger = { has_country_flag = GF_history_archive_flag_c }
	}
	text = {
		localization_key = GF_ogas.12200.d
		trigger = { has_country_flag = GF_history_archive_flag_d }
	}
	text = {
		localization_key = GF_ogas.12200.e
		trigger = { has_country_flag = GF_history_archive_flag_e }
	}
	text = {
		localization_key = GF_ogas.12200.f
		trigger = { has_country_flag = GF_history_archive_flag_f }
	}

	default = BLANK_STRING
}

defined_text = {
	name = GF_Get_OGAS_Work_Governer_Action
	text = {
		localization_key = GF_OGAS_Work_Action_Disable
		trigger = { has_modifier = GF_ogas_mode_governor }
	}
	default = GF_OGAS_Work_Action_Enable
}
defined_text = {
	name = GF_Get_OGAS_Work_Governer_Response
	text = {
		localization_key = GF_OGAS_Work_Governer_Disable_Response
		trigger = { has_modifier = GF_ogas_mode_governor }
	}
	default = GF_OGAS_Work_Governer_Enable_Response
}

defined_text = {
	name = GF_Get_OGAS_Work_Produce_Action
	text = {
		localization_key = GF_OGAS_Work_Action_Disable
		trigger = { has_modifier = GF_ogas_mode_produce }
	}
	default = GF_OGAS_Work_Action_Enable
}
defined_text = {
	name = GF_Get_OGAS_Work_Produce_Response
	text = {
		localization_key = GF_OGAS_Work_Produce_Disable_Response
		trigger = { has_modifier = GF_ogas_mode_produce }
	}
	default = GF_OGAS_Work_Produce_Enable_Response
}

defined_text = {
	name = GF_Get_OGAS_Work_Upkeep_Action
	text = {
		localization_key = GF_OGAS_Work_Action_Disable
		trigger = { has_modifier = GF_ogas_mode_upkeep }
	}
	default = GF_OGAS_Work_Action_Enable
}
defined_text = {
	name = GF_Get_OGAS_Work_Upkeep_Response
	text = {
		localization_key = GF_OGAS_Work_Upkeep_Disable_Response
		trigger = { has_modifier = GF_ogas_mode_upkeep }
	}
	default = GF_OGAS_Work_Upkeep_Enable_Response
}

defined_text = {
	name = GF_Get_OGAS_Work_War_Action
	text = {
		localization_key = GF_OGAS_Work_Action_Disable
		trigger = { has_modifier = GF_ogas_mode_war }
	}
	default = GF_OGAS_Work_Action_Enable
}
defined_text = {
	name = GF_Get_OGAS_Work_War_Response
	text = {
		localization_key = GF_OGAS_Work_War_Disable_Response
		trigger = { has_modifier = GF_ogas_mode_war }
	}
	default = GF_OGAS_Work_War_Enable_Response
}

defined_text = {
	name = GF_Get_OGAS_Work_Research_Action
	text = {
		localization_key = GF_OGAS_Work_Action_Disable
		trigger = { has_modifier = GF_ogas_mode_research }
	}
	default = GF_OGAS_Work_Action_Enable
}
defined_text = {
	name = GF_Get_OGAS_Work_Research_Response
	text = {
		localization_key = GF_OGAS_Work_Research_Disable_Response
		trigger = { has_modifier = GF_ogas_mode_research }
	}
	default = GF_OGAS_Work_Research_Enable_Response
}

# scope = planet
defined_text = {
	name = GetVolatileMotesIconIfAvailable
	text = {
		localization_key = volatile_motes_icon
		trigger = {
			owner = {
				OR = {
					has_technology = tech_volatile_motes
					has_technology = tech_mine_volatile_motes
				}
			}
		}
	}
	default = BLANK_STRING
}
defined_text = {
	name = GetExoticGasesIconIfAvailable
	text = {
		localization_key = exotic_gases_icon
		trigger = {
			owner = {
				OR = {
					has_technology = tech_exotic_gases
					has_technology = tech_mine_exotic_gases
				}
			}
		}
	}
	default = BLANK_STRING
}
defined_text = {
	name = GetRareCrystalsIconIfAvailable
	text = {
		localization_key = rare_crystals_icon
		trigger = {
			owner = {
				OR = {
					has_technology = tech_rare_crystals
					has_technology = tech_mine_rare_crystals
				}
			}
		}
	}
	default = BLANK_STRING
}

# scope = situation
defined_text = {
	name = GF_GetCoreChipDeficitStageSecondTooltip
	text = {
		localization_key = GF_core_chip_deficit_malfunction_doll_leader_modifier
		trigger = {
			current_stage = deficit_second
		}
	}
	default = BLANK_STRING
}

# scope = situation
defined_text = {
	name = GF_GetCoreChipDeficitStageThirdTooltip
	text = {
		localization_key = GF_core_chip_deficit_malfunction_doll_leader_and_pop_modifier
		trigger = {
			current_stage = deficit_third
		}
	}
	default = BLANK_STRING
}