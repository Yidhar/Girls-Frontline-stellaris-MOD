GF_can_doll_fill_ruler_job = {
	hidden_trigger = {
		exists = owner
		owner = {
			OR = {
				is_GF_authority = no
				has_policy_flag = GF_doll_work_policy_free
				has_policy_flag = GF_doll_work_policy_high
			}
		}
	}
}

GF_can_doll_fill_specialist_job = {
	hidden_trigger = {
		exists = owner
		owner = {
			OR = {
				is_GF_authority = no
				has_policy_flag = GF_doll_work_policy_free
				has_policy_flag = GF_doll_work_policy_high
				has_policy_flag = GF_doll_work_policy_middle
			}
		}
	}
}

can_destroy_planet_with_PLANET_KILLER_GF_COLLAPSE_ENDING_FLASH = {
	custom_tooltip = {
		fail_text = is_not_a_standard_planet_or_megastructure
		is_a_planet_megastructure = yes
	}
	custom_tooltip = {
		fail_text = is_shielded
		NOR = {
			is_planet_class = pc_shielded
			is_planet_class = pc_ringworld_shielded
			is_planet_class = pc_habitat_shielded
		}
	}
	#custom_tooltip = {
		#fail_text = is_not_hostile
		OR = {
			custom_tooltip = {
				text = is_not_hostile_cracker
				OR = {
					AND = {
						exists = space_owner
						space_owner = {
							OR = {
								is_at_war_with = from.owner
								is_country_type = swarm
								is_country_type = extradimensional
								is_country_type = extradimensional_2
								is_country_type = extradimensional_3
								is_country_type = ai_empire
							}
						}
					}
					AND = { # colony
						exists = owner
						owner = {
							OR = {
								is_at_war_with = from.owner
								is_country_type = swarm
								is_country_type = extradimensional
								is_country_type = extradimensional_2
								is_country_type = extradimensional_3
								is_country_type = ai_empire
							}
						}
					}
					AND = { # primitive
						exists = space_owner
						exists = owner
						owner = {
							is_primitive = yes
						}
						space_owner = {
							OR = {
								is_at_war_with = from.owner
								is_country_type = swarm
								is_country_type = extradimensional
								is_country_type = extradimensional_2
								is_country_type = extradimensional_3
								is_country_type = ai_empire
							}
						}
					}
				}
			}
			custom_tooltip = {
				text = not_barren_molten_frozen_toxic_test_fire
				NOT = { exists = owner }
				OR = {
					NOT = { exists = space_owner }
					AND = {
						exists = space_owner
						space_owner = { is_same_value = from.owner }
					}
				}
				OR = {
					is_planet_class = pc_barren
					is_planet_class = pc_barren_cold
					is_planet_class = pc_frozen
					is_planet_class = pc_molten
					is_planet_class = pc_toxic
					is_planet_class = pc_desert
					is_planet_class = pc_tropical
					is_planet_class = pc_arid
					is_planet_class = pc_continental
					is_planet_class = pc_ocean
					is_planet_class = pc_tundra
					is_planet_class = pc_arctic
					is_planet_class = pc_alpine
					is_planet_class = pc_savannah
					is_planet_class = pc_gaia
					is_planet_class = pc_relic
					is_planet_class = pc_nuked
					is_planet_class = pc_ringworld_habitable
					is_planet_class = pc_habitat
				}
			}
		}
	#}
}

GF_default_zion_comm_trigger = {
	AND = {
		has_authority = GF_auth_commonwealth
		has_country_flag = flag_GF_established_communication_with_zion
	}
}

# scope = species, from = country
GF_is_gavirul_species = {
	hidden_trigger = {
		has_species_flag = flag_GF_GAVIRUL_species
		from = {
			custom_tooltip = {
				has_country_flag = flag_GF_gavirul_project_completed
				fail_text = GF_require_gavirul_project_finished
			}
		}
	}
}

# scope = country, checks the country's authority and if v_GF_elid_threat_level is bigger than 0
GF_default_elid_event_trigger = {
	AND = {
		has_authority = GF_auth_commonwealth
		event_target:GF_home_world = {
			check_variable = {
				which = v_GF_elid_threat_level
				value > 0
			}
		}
	}
}

# scope = planet
GF_planet_has_contaminated_zone = {
	OR = {
		has_deposit = d_GF_black_zone
		has_deposit = d_GF_red_zone
		has_deposit = d_GF_yellow_zone
	}
}


# scope = country

@high_zion_favor_threshold		= 50
@decent_zion_favor_threshold 	= 30
@low_zion_favor_threshold		= 0

GF_has_zion_favor_very_high = {
	AND = {
		is_variable_set = v_GF_zion_favor
		check_variable_arithmetic = {
			which = v_GF_zion_favor
			subtract = @decent_zion_favor_threshold
			value >= @high_zion_favor_threshold			# value >= @high + @decent
		}
	}
	
}

GF_has_zion_favor_high = {
	AND = {
		is_variable_set = v_GF_zion_favor
		check_variable = {
			which = v_GF_zion_favor
			value >= @high_zion_favor_threshold
		}
	}
	
}

GF_has_zion_favor_decent = {
	AND = {
		is_variable_set = v_GF_zion_favor
		check_variable = {
			which = v_GF_zion_favor
			value >= @decent_zion_favor_threshold
		}
	}
}

GF_has_zion_favor_mid = {
	AND = {
		is_variable_set = v_GF_zion_favor
		check_variable = {
			which = v_GF_zion_favor
			value >= @low_zion_favor_threshold
		}
	}
}

GF_has_zion_favor_low = {
	AND = {
		is_variable_set = v_GF_zion_favor
		check_variable = {
			which = v_GF_zion_favor
			value < @low_zion_favor_threshold
		}
	}
}

GF_require_zion_favor_high = {
	custom_tooltip = {
		text = GF_require_zion_favor_high
		GF_has_zion_favor_high = yes
	}
}
GF_require_zion_favor_decent = {
	custom_tooltip = {
		text = GF_require_zion_favor_decent
		GF_has_zion_favor_decent = yes
	}
}
GF_require_zion_favor_mid = {
	custom_tooltip = {
		text = GF_require_zion_favor_mid
		GF_has_zion_favor_mid = yes
	}
}
# GF_require_zion_favor_low = {
# 	custom_tooltip = {
# 		text = GF_require_zion_favor_low
# 		GF_has_zion_favor_low = yes
# 	}
# }

# scope = country, energy >= 5K or 1 monthly income
GF_require_energy_stockpile_1 = {
	if = {
		limit = {
			check_variable = {
				which = v_GF_monthly_energy_income
				value >= @GF_zion_project_cost_max
			}
		}
		has_resource = {
			type = energy
			amount >= @GF_zion_project_cost_max
		}
	}
	else = {
		has_resource = {
			type = energy
			amount >= @GF_zion_project_energy_cost_1
		}
		custom_tooltip = {
			text = GF_require_energy_stockpile_1_monthly_income
			check_variable = {
				which = v_GF_monthly_energy_income
				value < v_GF_energy_stockpile
			}
		}
	}
	
}

# scope = country, energy >= 10K or 2 monthly income
GF_require_energy_stockpile_2 = {
	if = {
		limit = {
			check_variable_arithmetic = {
				which = v_GF_monthly_energy_income
				multiply = 2
				value >= @GF_zion_project_cost_max
			}
		}
		has_resource = {
			type = energy
			amount >= @GF_zion_project_cost_max
		}
	}
	else = {
		has_resource = {
			type = energy
			amount >= @GF_zion_project_energy_cost_2
		}
		custom_tooltip = {
			text = GF_require_energy_stockpile_2_monthly_income
			check_variable_arithmetic = {
				which = v_GF_monthly_energy_income
				multiply = 2
				value < v_GF_energy_stockpile
			}
		}
	}
}

# scope = country, energy >= 15K or 3 monthly income
GF_require_energy_stockpile_3 = {
	if = {
		limit = {
			check_variable_arithmetic = {
				which = v_GF_monthly_energy_income
				multiply = 3
				value >= @GF_zion_project_cost_max
			}
		}
		has_resource = {
			type = energy
			amount >= @GF_zion_project_cost_max
		}
	}
	else = {
		has_resource = {
			type = energy
			amount >= @GF_zion_project_energy_cost_3
		}
		custom_tooltip = {
			text = GF_require_energy_stockpile_3_monthly_income
			check_variable_arithmetic = {
				which = v_GF_monthly_energy_income
				multiply = 3
				value < v_GF_energy_stockpile
			}
		}
	}
}

# scope = pop
GF_is_non_doll_robot_pop = {
	AND = {
		NOT = { has_trait = GF_trait_doll }
		is_robot_pop = yes
	}
}

# scope = country
GF_has_robotic_leaders = {
	any_owned_leader = {
		species = { is_robotic = yes }
	}
}

# scope = leader
GF_is_enhanced_leader = {
	OR = {
		has_trait = GF_trait_leader_enhanced_governor
		has_trait = GF_trait_leader_enhanced_scientist
		has_trait = GF_trait_leader_enhanced_admiral
		has_trait = GF_trait_leader_enhanced_general
	}
}

# scope = leader
GF_leader_has_vanilla_negative_traits = {
	OR = {
		has_trait = leader_trait_stubborn				# 顽固
		has_trait = leader_trait_rigid_programming		# 死板编程
		has_trait = leader_trait_erratic_morality_core	# 不稳定道德核心
		has_trait = leader_trait_unstable_code_base		# 不稳定代码库
		has_trait = leader_trait_substance_abuser		# 药物依赖
		has_trait = leader_trait_arrested_development	# 没有前途
		has_trait = leader_trait_nervous				# 神经质
		has_trait = leader_trait_lethargic				# 懒散
		has_trait = leader_trait_armchair_commander		# 纸上谈兵
		has_trait = leader_trait_paranoid				# 偏执
		has_trait = leader_trait_corrupt				# 腐败
		has_trait = leader_trait_traumatized			# 受挫
		has_trait = leader_trait_maimed					# 残废
	}
}

# scope = leader
GF_leader_has_core_glitch = {
	OR = {
		has_trait = GF_trait_leader_core_glitch_governor
		has_trait = GF_trait_leader_core_glitch_scientist
		has_trait = GF_trait_leader_core_glitch_admiral
		has_trait = GF_trait_leader_core_glitch_general
	}
}

# scope = leader
GF_is_doll_leader = {
	NOR = {
		has_leader_flag = flag_GF_ogas_leader
		has_leader_flag = GF_OGAS_subnet_leader_@owner
	}
	species = { has_trait = GF_trait_doll }
}